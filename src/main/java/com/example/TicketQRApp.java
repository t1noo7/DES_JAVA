package com.example;
import com.google.zxing.*;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.Path;
import java.util.Hashtable;

/**
 * ·ª®ng d·ª•ng Swing: nh·∫≠p chu·ªói + key ‚Üí m√£ h√≥a DES ‚Üí xu·∫•t QR code
 * Qu√©t l·∫°i QR ƒë·ªÉ gi·∫£i m√£ th√†nh chu·ªói g·ªëc
 */
public class TicketQRApp extends JFrame {

    private JTextField inputField;
    private JTextField keyField;
    private JLabel qrLabel;
    private JTextArea outputArea;
    private JButton exportBtn; // n√∫t xu·∫•t QR

    public TicketQRApp() {
        setTitle("üéüÔ∏è DES + QR Code Demo");
        setSize(600, 550);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Panel nh·∫≠p
        JPanel topPanel = new JPanel(new GridLayout(3, 2, 5, 5));
        topPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
        topPanel.add(new JLabel("Chu·ªói c·∫ßn m√£ h√≥a:"));
        inputField = new JTextField();
        topPanel.add(inputField);

        topPanel.add(new JLabel("Kh√≥a (8 k√Ω t·ª±, vd: 12345678)"));
        keyField = new JTextField();
        topPanel.add(keyField);

        JButton genBtn = new JButton("T·∫°o QR Code");
        JButton scanBtn = new JButton("Gi·∫£i m√£ t·ª´ QR");
        topPanel.add(genBtn);
        topPanel.add(scanBtn);
        add(topPanel, BorderLayout.NORTH);

        // Panel trung t√¢m hi·ªÉn th·ªã QR + n√∫t xu·∫•t
        JPanel centerPanel = new JPanel(new BorderLayout());
        qrLabel = new JLabel("", SwingConstants.CENTER);
        qrLabel.setBorder(BorderFactory.createTitledBorder("M√£ QR"));
        centerPanel.add(qrLabel, BorderLayout.CENTER);

        exportBtn = new JButton("Xu·∫•t QR");
        exportBtn.setEnabled(false); // ch·ªâ b·∫≠t khi c√≥ QR
        centerPanel.add(exportBtn, BorderLayout.SOUTH);

        add(centerPanel, BorderLayout.CENTER);

        // Panel output
        outputArea = new JTextArea(5, 20);
        outputArea.setEditable(false);
        outputArea.setBorder(BorderFactory.createTitledBorder("K·∫øt qu·∫£"));
        add(new JScrollPane(outputArea), BorderLayout.SOUTH);

        // X·ª≠ l√Ω n√∫t b·∫•m
        genBtn.addActionListener(e -> generateQR());
        scanBtn.addActionListener(e -> decodeQR());
        exportBtn.addActionListener(e -> exportQR());
    }

    /** Sinh QR code t·ª´ chu·ªói ƒë√£ m√£ h√≥a */
    private void generateQR() {
        try {
            String text = inputField.getText();
            String key = keyField.getText();
            if (text.isEmpty() || key.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nh·∫≠p d·ªØ li·ªáu v√† key tr∆∞·ªõc!");
                return;
            }
            if (key.length() != 8) {
                JOptionPane.showMessageDialog(this, "Key ph·∫£i ƒë√∫ng 8 k√Ω t·ª±!");
                return;
            }

            String encrypted = DESExample.encryptDESBase64(text, key);

            int size = 250;
            Hashtable<EncodeHintType, Object> hints = new Hashtable<>();
            hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");
            BitMatrix matrix = new MultiFormatWriter().encode(encrypted, BarcodeFormat.QR_CODE, size, size, hints);

            qrLabel.setIcon(new ImageIcon(MatrixToImageWriter.toBufferedImage(matrix)));
            outputArea.setText("M√£ h√≥a (Base64):\n" + encrypted);

            exportBtn.setEnabled(true); // b·∫≠t n√∫t xu·∫•t khi ƒë√£ c√≥ QR
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói: " + ex.getMessage());
        }
    }

    /** Xu·∫•t QR ra file PNG */
    private void exportQR() {
        try {
            if (qrLabel.getIcon() == null) {
                JOptionPane.showMessageDialog(this, "Ch∆∞a c√≥ QR ƒë·ªÉ xu·∫•t!");
                return;
            }

            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle("Ch·ªçn n∆°i l∆∞u QR Code");
            chooser.setSelectedFile(new File("ticket_qr.png"));

            int result = chooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                String encrypted = outputArea.getText().split("\n")[1]; // l·∫•y Base64 ƒë√£ m√£ h√≥a

                int size = 250;
                Hashtable<EncodeHintType, Object> hints = new Hashtable<>();
                hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");
                BitMatrix matrix = new MultiFormatWriter().encode(encrypted, BarcodeFormat.QR_CODE, size, size, hints);

                Path path = file.toPath();
                MatrixToImageWriter.writeToPath(matrix, "PNG", path);

                JOptionPane.showMessageDialog(this, "Xu·∫•t QR th√†nh c√¥ng!\n" + file.getAbsolutePath());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói khi xu·∫•t: " + ex.getMessage());
        }
    }

    /** ƒê·ªçc file QR code v√† gi·∫£i m√£ */
    private void decodeQR() {
        try {
            File file = new File("ticket_qr.png");
            if (!file.exists()) {
                JOptionPane.showMessageDialog(this, "Ch∆∞a c√≥ file ticket_qr.png ƒë·ªÉ qu√©t!");
                return;
            }
            BufferedImage img = javax.imageio.ImageIO.read(file);
            LuminanceSource source = new BufferedImageLuminanceSource(img);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
            Result result = new MultiFormatReader().decode(bitmap);

            String key = keyField.getText();
            String decrypted = DESExample.decryptDESBase64(result.getText(), key);

            outputArea.setText("QR ƒë·ªçc ƒë∆∞·ª£c (Base64):\n" + result.getText() +
                               "\n\nGi·∫£i m√£ DES:\n" + decrypted);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "L·ªói gi·∫£i m√£: " + ex.getMessage());
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new TicketQRApp().setVisible(true));
    }
}